# -*- coding: utf-8 -*-
"""IntrotoAutonomous.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q8YVUwhnhD1uDNa-EAqtfzzeitbYLeeC
"""

import torch
torch.__version__

import torch
import torch.nn as nn
import torch.optim as optim

torch.manual_seed(0)

N = 20000
a = torch.rand(N)*20 - 10
b = torch.rand(N)*20 - 10
X = torch.stack([a,b], 1).float()
y = (a + b).unsqueeze(1).float()

model = nn.Linear(2, 1)

loss_fn = nn.MSELoss()
opt = optim.SGD(model.parameters(), lr=1e-2)


for epoch in range(50):
    pred = model(X)
    loss = loss_fn(pred, y)
    opt.zero_grad(); loss.backward(); opt.step()
    if (epoch+1) % 10 == 0:
        print(f"epoch {epoch+1:2d} | loss {loss.item():.6f}")


model.eval()
with torch.no_grad():
    test = torch.tensor([[3.0, 4.5], [-2.2, 9.7], [10.0, -3.5]], dtype=torch.float32)
    guess = model(test).squeeze()
    print("inputs:\n", test)
    print("model says:\n", guess)
    print("true sums:\n", test[:,0] + test[:,1])